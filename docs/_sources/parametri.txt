# -*- coding: utf8 -*-


5. Definire i parametri di input.
=================================

I parametri di input sono valori che occorre chiedere all'utente per specificare meglio le caratteristiche del report da generare: il cliente di cui si desidera vedere gli acquisti, i mesi per cui si devono mostrare le vendite, e così via. 

Quickreport permette di definire e organizzare con facilità questi parametri. 


5.1. PARAMETERS: l'elenco dei parametri.
----------------------------------------

``<progetto>.params.PARAMETERS`` è la parte di Quickreport su cui probabilmente lavorerete di più. E' un dizionario che deve avere, come chiavi, i nick dei vari report che avete definito sopra. Per ciascun report, dovete elencare i vari parametri in una tupla. 

Ancora una volta, un'occhiata alla demo vi chiarirà la struttura di ``PARAMETERS`` meglio di mille parole. 

Ciascun parametro, a sua volta, è una tupla con esattamente quattro elementi: 

* un nick corto che userete per identificare il parametro
* una descrizione più lunga che comparirà nella gui 
* il tipo del parametro (cfr. sotto)
* un dizionario che può contenere ulteriori elementi ozionali (vedi sotto). Se non avete bisogno di alcun elemento opzionale, lasciate ugualmente un dizionario vuoto. 

.. note:: alcuni report potrebbero non aver bisogno di parametri. In questo caso, basterà non includere il report in ``PARAMETERS``. Per esempio, nella demo il report "List of Genres" non ha parametri. 


5.2. I tipi dei parametri.
--------------------------

I tipi dei parametri sono in pratica dei widget wxPython adatti ad accogliere un certo tipo di dato, che l'utente inserisce come parametro di input. Per esempio, per una stringa di ricerca da inserire potete usare un tipo "text", che restituisce un widget basato su un ``wx.TextCtrl``; per una lista di opzioni tra cui scegliere potete usare il tipo "list", e così via. 

Tutti i tipi sono disponibili nel namespace ``typ.*``. Inoltre, è possibile definire tipi personalizzati a livello di progetto (questo è un argomento avanzato che tratteremo nel paragrafo seguente), che saranno disponibili nel namespace ``p_typ.*``

I tipi attualmente diponibili sono:

* ``typ.text``: un tipo per l'inserimento di testo
* ``typ.integer``: un tipo per l'inserimento di numeri interi
* ``typ.boolean``: per l'inserimento di valori Vero/Falso
* ``typ.symple_list``: presenta una lista di valori tra cui scegliere
* ``typ.id_list``: come il precedente, ma ha due colonne: la prima, nascosta, mantiene gli id univoci, mentre la seconda è quella che l'utente vede. ``GetValue`` e ``GetValue`` fanno riferimento agli id. 
* ``typ.droplist``: presenta una lista di valori tra cui scegliere (versione combobox)
* ``typ.id_droplist``: come il precedente, ma ha due colonne
* ``typ.date``: un tipo per l'inserimento di date
* ``typ.period``: permette di scegliere un periodo temporale compreso tra una data di inizio e una data di fine  
* ``typ.month``, ``typ.bimester``, ``typ.trimester``, ``typ.quadrimester``, ``typ.semester``: dividono l'anno in periodi fissi (per es., "terzo quadrimestre del 2010", etc.)


5.3. Aggiungere nuovi tipi di parametro.
----------------------------------------

Aggiungere nuovi tipi di parametro a quelli predefiniti è possibile, ma richiede qualche abilità di programmazione wxPython. 

Il luogo giusto per definire nuovi tipi di parametro è il modulo ``<progetto>.param_types.py``. I tipi definiti qui saranno visibili da ``<progetto>.params.py`` nel namespace ``p_typ.*`` (per distinguerli dai tipi "di default", che sono raggruppati nel namespace ``typ.*``). 

Essenzialmente, un tipo di parametro non è altro che un widget personalizzato di wxPython, al quale Quickreport richiede una certa API. Di conseguenza, il modo tipico di procedere è derivare da una classe wxPython esistente, modificare dove occorre, e garantire i metodi che servono a Quickreport. Potete dare un'occhiata ai tipi predefiniti (nel modulo ``param_tpes.py``) per prendere spunto. 

L'API necessaria per Quickreport è la seguente:

* un metodo ``GetValue``, usato per raccogliere il valore del parametro al momento di passarlo al database.

* un metodo ``SetValue``, usato per settare il valore di default. 

* un metodo ``SetBounds``, usato per settare i bounds del parametro. Per bounds e default, cfr. il capitolo seguente. 

* infine il widget deve notificare l'avvenuto cambiamento del suo valore chiamando la funzione ``post_evt_param_changed`` (già importata nel modulo). 


