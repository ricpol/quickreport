# -*- coding: utf8 -*-


6. Gli elementi opzionali dei parametri.
========================================

Abbiamo visto nel capitolo precedente che ``<progetto>.params.PARAMETERS`` è un dizionario che elenca i parametri necessari per ciascun report. Ogni parametro è specificato da una tupla di quattro elementi: i primi tre sono fissi e obbligatori, mentre il quarto è un dizionario di elementi opzionali. 

Gli elementi opzionali possibili sono numerosi: in questo capitolo li esaminiamo divisi per gruppi, ma intanto eccoli elencati tutti per comodità:

* ``validator``: un validatore wxPython per il parametro
* ``null``: se il paramentro può avere valore "Null", una label per la gui 
* ``null_default``: se ``True``, il parametro è "Null" di default
* ``null_value``: l'eventuale valore da dare allo stato di "Null" 
* ``default``: un valore di default per il parametro
* ``bounds``: dei bounds per il parametro
* ``func_default``: una funzione che restituisce un default 
* ``func_bounds``: una funzione che restituisce dei bounds 
* ``default_bounds``: una funzione che restituisce default e bounds 
* ``args_default``: un dizionario di named arguments da passare a ``func_default``
* ``args_bounds``: un dizionario di named arguments da passare a ``func_bounds``
* ``args_default_bounds``: un dizionario di named arguments da passare a ``default_bounds``
* ``dep_default``: una lista di altri parametri, il cui valore è passato a ``func_default`` al momento di valutarla
* ``dep_bounds``: una lista di altri parametri, il cui valore è passato a ``func_bounds`` al momento di valutarla
* ``dependencies``: una lista di altri parametri, il cui valore è passato a ``default_bounds`` al momento di valutarla
* ``dependency_if_null``: se ``True``, e se il paramentro compare come "dependency" di altri parametri, al momento della valutazione trasmette il valore effettivo del parametro, senza contare lo stato eventuale di "Null".
* ``recalc``: una lista di altri parametri che devono essere ricalcolati quando il valore di questo parametro cambia
* ``recalc_on_null``: se ``True`` (e se il parametro è "nullabile"), il ricalcolo dei parametri nella lista dei "recalc" avviene anche quando cambia lo stato di "Null".


6.1. L'elemento opzionale ``validator``.
----------------------------------------

wx.Python offre il meccanismo dei ``wx.Validator`` per la convalida dei dati. Noi consigliamo di usare i Validator solo come ultima risorsa: la cosa migliore è sempre restringere le possibilità di scelta (usando valori di default e bounds, cfr. sotto) così che l'utente non abbia la possibilità di inserire dati non validi nei parametri. 

In ogni caso, Quickreport mette attualmente a disposizione due validatori che potete usare:

* ``val.NotEmpty`` è un validatore che si può applicare alle caselle di testo (``typ.text``) per segnalare quando sono vuote;
* ``val.ValidPeriod`` si può applicare ai ``typ.period`` per segnalare quando l'utente immette un periodo negativo. 

Inoltre, è possibile scrivere altri validatori personalizzati nel modulo ``<progetto>.param_validators.py``: questi saranno disponibili in ``<progetto>.params.py`` nel namespace ``p_val.*``.

La validazione avviene al momento in cui l'utente fa clic sul pulsante "report" dell'interfaccia: se la validazione fallisce, il parametro corrispondente si colora in giallo e il report non viene generato. 

.. note:: Nella demo, il report ``invoices_period`` fa uso di un ``val.ValidPeriod``. 


6.2. ``null``, ``null_default`` e ``null_value``: gestire i valori Null.
------------------------------------------------------------------------

Spesso si desidera permettere che i parametri assumano anche valore "Null". Naturalmente si può gestire "a mano" questa evenienza: per esempio, se il parametro offre una lista di valori tra cui scegliere (è un ``typ.symple_list`` per esempio), si può aggiungere un valore "vuoto" alla lista. 

Tuttavia Quickreport mette a disposizione un meccanismo più generale per affrontare queste situazioni. Il valore opzionale ``'null'``, se presente, segnala che il parametro può essere "nullabile". Dal punto di vista dell'interfaccia utente, al parametro viene affiancato un CheckBox: se l'utente flagga il CheckBox, il parametro si disabilita, e assume valore "Null". 

Se si aggiunge ``'null'`` al dizionario degli elementi opzionali di un parametro, la sintassi da rispettare è come in questo esempio::

    {'null' : 'testo di spiegazione'}
    
Il breve testo di spiegazione verrà visualizzato nella gui accanto al CheckBox, per indicare all'utente che cosa significa "nullare" il parametro. 

Inoltre, se si vuole che il paramentro sia essere "nullato" per default, si può aggiungere::

    {'null_default' : True}
    
Se ``'null_default'`` non viene usato, allora Quickreport non "nullerà" il parametro per default.

.. note:: Nella demo, i report ``tracks`` e ``invoices_by_contry`` fanno uso di parametri "nullabili". 

Infine, se un parametro è "nullabile", allora quando l'utente scelga di flaggare il "Null", il parametro assume il valore Python ``None``. In genere questo comportamento di default è quello che vi serve. Ma se così non fosse, potete specificare un valore diverso per la condizione di "Null"; aggiungendo l'elemento opzionale ``'null_value'``. Per esempio::

    {'null_value' : ''}
    
passerà una stringa vuota in caso di "Null". 

Ovviamente usare ``'null_value'`` e ``'null_default'`` ha significato solo in presenza anche dell'elemento opzionale ``'null'``.


6.4. ``bounds`` e ``default``: limitare le scelte per un parametro.
-------------------------------------------------------------------

Nel gergo di Quickreport, i "bounds" di un parametro sono i "limiti" che quel parametro può assumere. Che cosa siano questi limiti, dipende dal tipo di parametro: per un ``typ.integer`` o un ``typ.date``, sono il valore minimo e il massimo che il parametro può assumere; per un ``typ.symple_list``, sono una lista di valori tra cui l'utente deve scegliere; e così via. 

Quindi, a seconda del parametro, può avere senso scrivere::

    {'bounds' : ('Torino', 'Milano', 'Firenze', 'Roma')}
    
oppure::

    {'bounds' : (10, 100)}
    
eccetera. 

Segue una lista dei "bounds" accettati dai vari parametri di Quickreport:

* ``typ.text``: non è possibile assegnare bounds.
* ``typ.integer``: ``(int, int)`` -> valore minimo e massimo.
* ``typ.boolean``: non è possibile assegnare bounds.
* ``typ.symple_list`` e ``typ.droplist``: ``(str, ...)`` -> i valori tra cui scegliere (una tupla di stringhe).
* ``typ.id_list`` e ``typ.id_droplist``: ``((id, str), ...)`` -> i valori tra cui scegliere: una tupla di tuple. L'elemento "id" può essere qualsiasi cosa (perché non verrà visualizzato nel combobox), purché gli id siano univoci; il secondo elemento deve essere per forza una stringa.
* ``typ.date``: ``(datetime.date, datetime.date)`` -> valore minimo e massimo.
* ``typ.period``: ``(datetime.date, datetime.date)`` -> valore minimo e massimo.
* ``typ.month``, ``typ.bimester``, ``typ.trimester``, ``typ.quadrimester``, ``typ.semester``: ``(datetime.date, datetime.date)`` -> valore minimo e massimo (solo l'anno viene preso in considerazione).

Il valore opzionale ``'default'`` specifica semplicemente il valore di default per il parametro. Può essere usato anche in assenza di ``'bounds'`` (per indicare, per esempio, il valore di default di una casella di testo). 

Se avete indicato dei ``'bounds'`` per il parametro, consigliamo tuttavia di indicare sempre anche un ``'default'``, per evitare che wxPython attribuisca un default in contrasto con le vostre intenzioni. Per esempio, per una lista scrivete sempre::

    {'bounds' : ('Torino', 'Milano', 'Firenze', 'Roma'),
     'default' : 'Torino'}
    
Se trascurate di indicare il ``'default'``, wxPython assume che il valore predefinito sia ``''`` (la stringa vuota), e pertanto, se l'utente non modifica nulla, il parametro assume un valore che non è compreso nella lista che avete indicato nei vostri ``'bounds'``.


6.5. ``func_bounds``, ``func_default``, ``default_bounds``: valori dinamici per default e bounds.
-------------------------------------------------------------------------------------

I valori opzionali ``'bounds'`` e ``'default'`` sono piuttosto limitati, perché vi permettono di inserire solo dei valori "statici". Ma spesso voi volete decidere bounds e default in modo "dinamico", per esempio interrogando il database, o in base a qualche altra condizione esterna. 

.. note:: L'esempio più facile, nella demo, è il report ``employees``, dove la lista degli impiegati, naturalmente, è estratta dal database "sul momento". 

Per consentirvi di calcolare bounds e default in modo "dinamico", Quickreport mette a disposizione gli elementi opzionali ``'func_bounds'``, ``'func_default'`` e ``'default_bounds'``. 

Ciascuno di questi tre elementi opzionali, se usato, non va impostato su una lista di parametri, ma *sul nome di una funzione* che verrà eseguita a runtime. Più precisamente:

* ``func_bounds`` deve essere impostato sul nome di una funzione che, eseguita, restituisce una lista di valori (bounds)
* ``func_default`` deve essere impostato sul nome di una funzione che, eseguita, restituisce un singolo valore (default)
* ``default_bounds`` deve essere impostato sul nome di una funzione che, eseguita, restituisce una tupla di due valori: un default, e una lista di bounds. 

La ragione per cui Quickreport mette a disposizione anche ``'default_bounds'`` è che molto spesso, il valore di default si sceglie tra uno dei bounds possibili: di conseguenza vorrete spesso utilizzare la stessa funzione per calcolare entrambi. 

Quickreport offre al momento tre funzioni di utilità generale per calcolare default e bounds temporali in casi tipici, e le raccoglie nel namespace ``dfl.*``:

* ``dfl.date_today(offset=0)`` può essere usata per un ``'func_default'``, e restituisce la data di oggi (più o meno un numero di giorni ``offset``)
* ``dfl.years_span(min_offset=-10, max_offset=10)`` può essere usata con ``'func_bounds'``, e restituisce un intervallo di anni centrato sull'anno corrente, da un minimo di ``min_offset`` a un massimo di ``max_offset``
* ``dfl.today_years_span(min_offset=-10, max_offset=10)`` può essere usata con ``'default_bounds'``, ed è una combinazione delle due precedenti: restitusce la data corrente e un intervallo di anni. 

.. note:: Il modo corretto di usare queste funzioni è scrivere, per esempio, ``{'func_default' : dfl.date_today}``. Questo chiamerà la funzione con il valore predefinito per l'argomento opzionale ``offset``. E se volessimo specificare un valore diverso per ``offset``? Per questo bisognerà pazientare fino al prossimo paragrafo...

Ma nella maggior parte dei casi sarete voi stessi a scrivere le funzioni che vi servono per il vostro progetto. Dovete scriverle nel modulo ``<progetto>.param_defaults.py``, e saranno importate automaticamente in ``<progetto>.params.py`` nel namespace ``p_dfl.*``.

.. note:: Nella demo ci sono molti report che fanno uso di ``'func_bounds'``, ``'func_default'`` e ``'default_bounds'``. Guardate anche il modulo ``chinook_demo.param_defaults.py`` per avere un'idea di come scrivere le funzioni per i bounds e defaults nei vostri progetti. 

Un'osservazione conclusiva: chiaramente, potete usare nello stesso parametro gli elementi opzionali "statici" insieme a quelli "dinamici", se sapete cosa state facendo. Per esempio, se usate ``'func_bounds'`` per determinare dinamicamente una lista di città, ma siete sicuri che nella lista ci sarà sempre Roma, potete anche usare un default statico::

    {'func_bounds' : p_dfl.my_list_of_cities,  # dinamico
     'default' : 'Roma'}                       # statico!

Però dovete essere sicuri del fatto vostro: se in qualche circostanza ``p_dfl.my_list_of_cities`` non dovesse includere anche Roma, le conseguenze sarebbero spiacevoli...

In genere, decidere quali usare tra ``'default'``, ``'bounds'``, ``'func_default'``, ``'func_bounds'`` e ``'default_bounds'`` dipende dalle situazioni, ed è una questione di buon senso. Tuttavia, le regole precise sono queste: 

* ``'default_bounds'`` se presente ha sempre la precedenza su tutti gli altri. Quindi, per esempio, se indicate contemporaneamente ``'default_bounds'`` e ``'func_bounds'``, quest'ultima verrà ignorata;
* le versioni dinamiche hanno sempre la precedenza sulle corrispondenti statiche: quindi ``'func_bounds'`` ha la precedenza su ``'bounds'``, e ``'funct_default'`` ha la precedenza su ``'default'``.


6.6. ``args_default``, ``args_bounds`` e ``args_default_bounds``: argomenti opzionali per le funzioni di bounds e defaults.
---------------------------------------------------------------------------------------------------------------------------

Se usate ``'func_default'``, ``'func_bounds'`` o ``'default_bounds'`` per calcolare dinamicamente bounds e defaults, allora potete scrivere delle funzioni che accettano anche named arguments per personalizzare ulteriormente l'output. 

Per esempio, la funzione ``dfl.date_today`` che abbiamo visto nel paragrafo precedente, accetta anche un argomento opzionale ``offset``. 

Per passare argomenti alle funzioni definite per ``'func_default'``, ``'func_bounds'`` e ``'default_bounds'`` Quinckreport vi mette a disposizione gli elementi opzionali ``'args_default'``, ``'args_bounds'`` e ``'args_default_bounds'`` (rispettivamente). 

Così, se volete che un parametro sia impostato per default sulla data di ieri, potete scrivere::

    {'func_default' : dfl.date_today, 
     'args_default' : {'offset' : -1} }

.. note:: Nella demo, il report ``invoices_period`` fa uso di argomenti opzionali. 


6.7. ``dep_default``, ``dep_bounds`` e ``dependencies``: determinare bounds e default di un parametro basandosi sul valore degli altri. 
---------------------------------------------------------------------------------------------------------------------------------------

Una delle complicazioni più frequenti nel raccogliere i parametri per la reportistica, è che spesso il valore di un parametro deve dipendere dal valore di altri. Per esempio, un parametro potrebbe contenere una lista di Stati: a seconda dello Stato scelto dall'utente, un secondo parametro dovrebbe mostrare una lista di città di quello Stato. 

Per affrontare queste situazioni, Quickreport mette a disposizione tre elementi opzionali nuovi che sviluppano il concetto di "dependency": ``'dep_default'``, ``'dep_bounds'`` e ``'dependencies'``. 

Ciascuno di questi elementi, se usato, deve essere impostato su una lista di *nomi di altri parametri*: indica cioè di quali altri parametri bisogna tener conto quando si calcolano dinamicamente bounds e default di un parametro. 

Nel dettaglio, la cosa funziona in modo molto simile al meccanismo dei parametri opzionali visto sopra. Quando scrivete la vostra funzione per il calcolo dei bounds/default di un parametro, potete includere nella sua signature dei named arguments corrispondenti al nome di altri parametri. Poi dovete impostare ``'dep_default'``, ``'dep_bounds'`` oppure ``'dependencies'`` (a seconda che la vostra funzione sia richiamata da ``'func_bounds'``, ``'func_default'`` o ``'default_bounds'`` rispettivamente) con una lista di questi altri parametri. 

Al momento di calcolare bounds e default del parametro, Quickreport preleva i valori di tutte le "dependency" che avete indicato, e li passa alla vostra funzione. 

Un esempio chiarirà meglio le cose: riprendiamo il caso di "Stati-città", menzionato sopra. Supponiamo di avere due parametri, chiamati ``stato`` e ``citta``. Entrambi i paramentri hanno default e bounds determinati dinamicamente, ma il secondo deve tener conto anche del valore del primo. 

Ecco come imposteremo i parametri in ``<progetto>.params.py``::
    
    # il parametro "stato":
    ('stato', 'Seleziona uno Stato', typ.droplist,
       {'default_bounds' : p_dfl.lista_degli_stati } ), 
    # il parametro "citta":
    ('citta', u'Seleziona una Città', typ.droplist, 
       {'default_bounds' : p_dfl.lista_delle_citta_per_stato, 
        'dependencies' : ['stato']  }  )

E naturalmente, in ``<progetto>.param_defaults.py``, scriveremo una funzione per calcolare la lista delle città che tenga conto degli Stati::

    def lista_delle_citta_per_stato(stato=None):
        # etc. etc.
        
Se poi amate particolarmente le complicazioni, sappiate che potete usare contemporaneamente le "dependency" e gli argomenti opzionali visti al paragrafo precedente. Per esempio, supponiamo che vogliate calcolare la lista delle città tenendo conto non solo dello Stato, ma anche del numero di abitanti. Potreste scrivere qualcosa del genere::

    # in <progetto>.params.py:
    ('citta', u'Seleziona una Città', typ.droplist, 
       {'default_bounds' : p_dfl.lista_delle_citta_per_stato, 
        'dependencies' : ['stato'], 
        'args_default_bounds' : {'min_popolazione' : 10000} }  )
        
    # in <progetto>.param_defaults.py:
    def lista_delle_citta_per_stato(stato=None, min_popolazione=None):
        # etc. etc.
        
.. note:: La demo ha alcuni report che usano il meccanismo delle "dependency": ``album_artis``, ``traks`` e ``invoices_by_country``.


6.8. ``dependency_if_null``: decidere che valore passare in caso di "Null".
---------------------------------------------------------------------------

Ecco un problema ulteriore: se avete dichiarato "nullabile" un parametro (inserendo l'elemento opzionale ``'null'``, vedi sopra), e questo parametro compare nella lista delle "dependency" di altri paramentri, come bisogna comportarsi quando l'utente decide di "nullare" il parametro?

In questi casi, il comportamento di default di Quickreport è il seguente: se un parametro ha valore "Null" al momento di essere richiesto per il calcolo di un altro parametro, allora Quickreport passa il valore definito per "Null" (ossia ``None``... sempre che non lo abbiate modificato usando ``'null_value'``). 

Talvolta invece volete passare il "vero" valore del parametro, anche se in quel momento è "nullato": in questo caso, basta aggiungere agli elementi opzionali del parametro anche il seguente::

    {'dependency_if_null' : True}
    
Naturalmente, l'eventuale presenza di ``'dependency_if_null'`` ha effetto solo se il parametro è "nullabile" (ossia se ha anche l'elemento opzionale ``'null'``), e se compare nelle "dependency" di qualche altro parametro. 

.. note:: Nella demo, il report ``invoices_by_contry`` e ``invoices_by_contry`` usano ``'dependency_if_null'``.



6.9. ``recalc``: decidere quando i parametri devono essere ricalcolati. 
-----------------------------------------------------------------------

Fin qui abbiamo parlato di **come** calcolare dinamicamente i bounds/default dei parametri, ma non di **quando** farlo. 

Quickreport applica tutte le regole definite nei vari ``'func_default'``, ``'func_bounds'``, ``'default_bounds'``, ``'args_default'``, ``'args_bounds'``, ``'args_default_bounds'``, ``'dep_default'``, ``'dep_bounds'``, ``'dependencies'`` e ``'dependency_if_null'`` una prima volta all'inizio, nella fase di creazione della finestra grafica che presenta i parametri all'utente. 

In quel momento, tuttti i parametri sono calcolati **nell'ordine in cui li avete inseriti**. E' importante ricordarlo, perché se il parametro "B" ha bisogno del valore del parametro "A" per calcolare il proprio, allora "B" dovrebbe essere dichiarato dopo "A". 

Una volta che la finestra è stata creata e l'utente ne prende il controllo, l'elemento opzionale ``'recalc'`` determina quali parametri devono essere ri-calcolati, e quando. 

``'recalc'`` deve contenere una lista di nomi di altri parametri da ri-calcolare, ogni volta che il valore del parametro cambia. 

Per chiarire, riprendiamo l'esempio "Stato-città" del paragrafo 6.7.::

    # in <progetto>.params.py:
    ('stato', 'Seleziona uno Stato', typ.droplist,
       {'default_bounds' : p_dfl.lista_degli_stati } ), 
       
    ('citta', u'Seleziona una Città', typ.droplist, 
       {'default_bounds' : p_dfl.lista_delle_citta_per_stato, 
        'dependencies' : ['stato'] } )
        
    # in <progetto>.param_defaults.py:
    def lista_delle_citta_per_stato(stato=None):
        # etc. etc.
        
Queste impostazioni sono ancora incomplete: dicono che occorre tener conto del valore di ``stato`` per calcolare il valore di ``citta``, ma non dicono **quando** occorre ricalcolare il valore di ``citta``. 

Noi abbiamo bisogno che la lista delle città si aggiorni ogni volta che l'utente sceglie un nuovo Stato. Basterà quindi aggiungere l'elemento opzionale ``'recalc'`` alla definizione di ``stato``::

    # in <progetto>.params.py:
    ('stato', 'Seleziona uno Stato', typ.droplist,
       {'default_bounds' : p_dfl.lista_degli_stati, 
        'recalc' : ['citta'] } ), 
    # etc. etc. 
       
Una considerazione importante: Quickreport non prende in considerazioni ``'recalc'`` "a cascata". Ovvero: se "A" chiede di ricalcolare "B", e "B" prevede il ``'recalc'`` di "C", tuttavia "C" non verrà ricalcolato quando cambia "A". 

Un esempio chiarirà meglio. Supponiamo di avere una catena "Stato-Regione-Città". Noi vogliamo naturalmente che, cambiando lo Stato, venga ricalcolata anche la lista delle Regioni, e che questo inneschi a sua volta il ricalcolo della lista delle città. 

Verrebbe spontaneo organizzare i parametri in questo modo::

    # in <progetto>.params.py:
    ('stato', 'Seleziona uno Stato', typ.droplist,
       {'default_bounds' : p_dfl.lista_degli_stati, 
        'recalc' : ['regione'] } ), 
    
    ('regione', 'Seleziona una Regione', typ.droplist,
       {'default_bounds' : p_dfl.lista_delle_regioni, 
        'recalc' : ['citta'],
        'dependencies' : ['stato'] } ), 

    ('citta', u'Seleziona una Città', typ.droplist,
       {'default_bounds' : p_dfl.lista_delle_citta, 
        'dependencies' : ['regione'] } )

Tuttavia questo non funziona, perché Quickreport non esegue ``'recalc'`` a cascata: quando cambia lo Stato, viene eseguito il ``'recalc'`` della Regione, ma questo non innesca a sua volta il ``'recalc'`` della città. 

Il modo giusto di procedere è indicare nell'elemento ``'recalc'`` **tutti** gli altri parametri da ricalcolare, nell'ordine esatto::

    # in <progetto>.params.py:
    ('stato', 'Seleziona uno Stato', typ.droplist,
       {'default_bounds' : p_dfl.lista_degli_stati, 
        'recalc' : ['regione', 'citta'] } ),  # <- cosi' funziona!!
    
    ('regione', 'Seleziona una Regione', typ.droplist,
       {'default_bounds' : p_dfl.lista_delle_regioni, 
        'recalc' : ['citta'],
        'dependencies' : ['stato'] } ), 

    ('citta', u'Seleziona una Città', typ.droplist,
       {'default_bounds' : p_dfl.lista_delle_citta, 
        'dependencies' : ['regione'] } )

Perché Quickreport non esegue ``'recalc'`` "a cascata"? Per evitare il rischio che una impostazione sbagliata provochi un ``'recalc'`` ricorsivo: "A" che chiama "B" che chiama "A", etc. Inoltre, anche se la sequenza::

    'stato', #...
        'recalc' : ['regione', 'citta']
        
    'regione', #...
        'recalc' : ['citta']
        
può essere vista come una piccola ridondanza, secondo noi ci guadagna in chiarezza. Infatti in questo modo siete costretti a specificare, per ciascun parametro, **tutti** gli altri parametri da ricalcolare, nell'ordine esatto. 


6.10. ``recalc_on_null``: decidere se innescare il ricalcolo quando cambia lo stato di Null.
--------------------------------------------------------------------------------------------

Ecco un'ultima raffinatezza. Se un parametro è "nullabile" e prevede una lista di ``'recalc'``, il ricalcolo dovrebbe essere innescato anche quando l'utente cambia lo stato di "Null" del parametro?

Il comportamento di default di Quickreport è: no. 

Tuttavia, se invece volete innescare il ricalcolo dei paramentri collegati anche quando cambia lo stato di "Null", basterà inserire l'elemento opzionale::

    {'recalc_on_null' : True}
    
Ovviamente, ``'recalc_on_null'`` non ha nessun effetto se non è anche presente anche una lista di ``'recalc'``. 

Ricordatevi anche che è possibile usare ``'recalc_on_null'`` in accoppiata con ``'dependency_if_null'``::

    {'recalc_on_null' : True, 'dependency_if_null' : True}
    
se volete che, oltre che innescare il ricalcolo, il valore usato tenga conto dello stato di "Null". 

.. note:: Nella demo, il report ``tracks`` fa uso di ``'recalc_on_null'`` e di ``'dependency_if_null'``
