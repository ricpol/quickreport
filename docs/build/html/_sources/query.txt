# -*- coding: utf8 -*-


8. Le query al database per la generazione dei report.
======================================================

Finora abbiamo esaminato la parte di "input" di Quickreport: come organizzare i report in alberi di menu, e come presentare all'utente i parametri necessari a generare il report. 

Quando l'utente, dopo aver impostato i valori dei parametri, fa clic sul pulsante "report", Quickreport raccoglie tutti i valori dei parametri e li passa a una funzione che si incarica di elaborarli e interrogare il database per estrarre i dati. 

Questo è il momento in cui Quickreport fa un passo indietro, e vi lascia gestire questa fase come meglio credete. Quickreport preferisce non fare assunzioni sul tipo di database che avete, se usate un ORM o un layer intermedio, oppure se preferite fare "a mano", etc. Potete collegare facilmente a Quickreport qualsiasi meccanismo di connessione al database che abbiate ideato per la vostra applicazione. 

Tutto ciò che Quickreport si aspetta da voi è che, una volta estratti i dati, li restituiate rispettando un'API davvero minimale, che esaminiamo in questo capitolo. 


8.1. ``QuickReportSettings.db``: un approfondimento.
----------------------------------------------------

Abbiamo visto che ``QuickReportSettings.db`` è la variabile globale che comunica a QuickReport dove può trovare una connessione al database. 

Nei capitoli precedenti, per semplicità, abbiamo trattato ``QuickReportSettings.db`` come se fosse una impostazione *necessaria* di Quickreport, ma in realtà non è affatto così. Infatti, Quickreport non usa mai, internamente, questa variabile. 

Ricapitoliamo tutti i punti in cui ``QuickReportSettings.db`` può comparire:

* in ``<progetto>.enable_menus.py``: eventualmente potreste aver bisogno di interrogare il database per decidere se una voce di menu deve esssere abilitata oppure no (nella demo, per esempio, questo succede);

* in ``<progetto>.param_defaults.py``: molto probabilmente avrete bisogno del database per decidere bounds e default "dinamici" dei paramentri;

* in ``<progetto>.query.py``: è il modulo di cui ci occupiamo in questo capitolo, ed è il punto in cui estraete i dati dal database per generare il report. 

Ovviamente, ``QuickReportSettings.db`` potrebbe comparire in qualunque altro modulo del vostro progetto, se decidete di fare delle personalizzazioni particolarmente esotiche. 

Ma in sostanza, ``QuickReportSettings.db`` può essere usato solo nelle parti di codice che scrivete voi stessi. Di conseguenza, potete impostarlo come preferite, o addirittura non usarlo, e rimpiazzarlo con qualcos'altro. 

Le API di Quickreport sono indifferenti al modo in cui vi collegate al database: per esempio, le funzioni di ``<progetto>.enable_menus.py`` devono restituire sempre ``True`` o ``False``, e le funzioni di ``<progetto>.param_defaults.py`` devono restituire valori singoli (per i default) o tuple di valori (per i bounds). Non importa con quali mezzi le funzioni che definite in quei moduli ottengono questi risultati. 

Fatta questa precisazione importante, nel seguito di questo capitolo continueremo a riferirci a ``QuickReportSettings.db`` come viene usato nella demo: un oggetto di connessione a un database sqlite. Nella demo e in questa documentazione, per mantenere le cose semplici, non useremo Sqlalchemy o altri strumenti avanzati, e semplicemente costruiremo query "a mano" da sottoporre alla connessione ``QuickReportSettings.db``.


8.2. L'API di ``<progetto>.query.py``.
--------------------------------------

Nel modulo ``<progetto>.query.py`` dovete definire delle funzioni che, per ciascun report, interrogano il database e restituiscono i dati. 

Per ciascun report, dovete definire una funzione: naturalmente potete scrivere anche qualsiasi funzione helper che desiderate, o fattorizzare il vostro codice come preferite. L'importante però è che, alla fine, a ciascun report corrisponda una funzione che Quickreport chiamerà automaticamente al momento opportuno. 

Perché Quickreport sappia quale funzione chiamare, dovete registrarla nel dizionario ``DISPATCH_TABLE``, secondo questa logica::

    DISPATCH_TABLE = { 'nick_del_report' : funzione }
    
La funzione registrata deve rispettare una API ben precisa: 

* deve accettare come unico argomento un dizionario (nella demo lo abbiamo chiamato sempre ``params``, ma il nome è lasciato a voi, chiaramente). Quickreport riempirà automaticamente questo dizionario con i valori raccolti per i vari parametri, secondo la logica ``{ 'nick_parametro' : valore }``. Quindi, se il vostro report prevede i parametri ``'data'`` e ``'stato'``, all'interno della funzione li potete recuperare come ``params['data']`` e ``params['stato']`` rispettivamente.
* la funzione deve essere un *generatore*;
* deve sempre yield-are per prima cosa una lista di stringhe: le **intestazioni** delle colonne del report;
* subito dopo deve yield-are una seconda lista di stringhe, con lo stesso numero di elementi: i **tipi** di dato per ciascuna colonna. I tipi di dato disponibili sono esaminati nel dettaglio nel capitolo seguente;
* solo a questo punto, se non ci sono dati, deve sollevare ``StopIteration``;
* in caso contrario, deve yield-are una riga di dati alla volta (una normale tupla di valori);
* infine, deve sollevare ``StopIteration`` quando non ci sono più dati.


8.3. La funzione helper ``_sql_exec``.
--------------------------------------

Per semplificare ulteriormente questa API, Quickreport mette a disposizione una piccola funzione helper ``_sql_exec``. Quando create un nuovo progetto, questa funzione è trascritta al fondo del modulo ``<progetto>.query.py``, quindi ne troverete una copia per ciascun nuovo progetto. Sentitevi liberi di modificarla, o anche semplicemente di non usarla. 

``_sql_exec`` è un generatore che interroga il database, e produce le intestazioni delle colonne, i tipi dei dati e le righe dei dati, rispettando l'API necessaria. 

Se decidete di usarla, tutto ciò che vi resta da fare all'interno della vostra funzione è:

* definire la lista delle **intestazioni**;
* definire la lista dei **tipi**;
* comporre una **stringa sql**;
* comporre una tupla di **parametri** per la stringa sql;
* terminare la vostra funzione con::

    return _sql_exec(intestazioni, tipi, stringa_sql, parametri)
    
Naturalmente ``_sql_exec`` utilizza ``QuickReportSettings.db`` per interrogare il database! Va da sé che, se state utilizzando un metodo differente per accedere al database, dovete modificare ``_sql_exec`` oppure non utilizzarla (in questo caso, potete anche cancellarla). 

.. note :: La demo, naturalmente, contiene una funzione per ciascun report, e tutte usano _sql_exec.

